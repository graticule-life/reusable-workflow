name: Validate that secrets in service manifest exist in a copilot environment

on:
  workflow_call:
    inputs:
      environment:
        description: 'GitHub repo environment name'
        required: true
        type: string
    secrets:
      AWS_ROLE_TO_ASSUME:
        description: 'IAM role with copilot permissions'
        required: true

jobs:
  secret-check:
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: Get secrets from manifest.yml
      uses: mikefarah/yq@master
      with:
        cmd: yq -o t '.secrets | keys' copilot/${{ vars.COPILOT_SERVICE }}/manifest.yml
    - name: Get secrets from manifest.yml
      uses: mikefarah/yq@master
      with:
        cmd: yq -o c '.secrets | keys' copilot/${{ vars.COPILOT_SERVICE }}/manifest.yml
    - name: Get secrets from manifest.yml
      uses: mikefarah/yq@master
      with:
        cmd: yq -o j '.secrets | keys' copilot/${{ vars.COPILOT_SERVICE }}/manifest.yml
    - name: Get secrets from manifest.yml
      id: manifestSecrets
      uses: mikefarah/yq@master
      with:
        cmd: yq '.secrets | keys' copilot/${{ vars.COPILOT_SERVICE }}/manifest.yml
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ vars.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
    - name: Get secrets from Param Store in SSM
      id: ssmSecrets
      run: |
        echo "ssmSecrets=$(aws ssm get-parameters-by-path --output json --recursive --path /copilot/${{ vars.COPILOT_APPLICATION }}/${{ vars.COPILOT_ENVIRONMENT }}/secrets | jq '.Parameters[].Name' | jq -s -c)" >> $GITHUB_OUTPUT
    - name: Compare secrets
      run: |
        #!/bin/bash

        # Load the output of a CLI command into an array
        ssmString=${{ steps.ssmSecrets.outputs.ssmSecrets }}
        manifestString=["${{ steps.manifestSecrets.outputs.result }}"]
        IFS=',' read -r -a ssmSecrets <<< "$ssmString"
        IFS='\n-' read -r -a manifestSecrets <<< "$manifestString"

        # Iterate over the array and print the values
        REGEX='([A-Za-z0-9_]+)'
        for value in "${manifestSecrets[@]}"
        do
            echo "value1=$value."
            if [[ $value =~ $REGEX ]]; then
              # extract just regex match from value
              #[[ $value =~ $REGEX ]] && value=${BASH_REMATCH[1]}
              value=`echo $value | sed 's/ *$//g'`
              found=false
              echo "value2=$value."
              target="/copilot/${{ vars.COPILOT_APPLICATION }}/${{ vars.COPILOT_ENVIRONMENT }}/secrets/$value"
              echo "target=$target."
              for ((idx=0; idx<${#ssmSecrets[@]}; ++idx)); do
                echo "ssmSecrets[$idx]=${ssmSecrets[$idx]}."
                if grep -q "$value" <<< "${ssmSecrets[$idx]}"; then
                  echo "found $value.";
                  found=true;
                fi
              done
              if [ $found == false ]; then
                echo "NOT FOUND $value.";
                exit 1;
              fi
            fi
        done
        exit 0;